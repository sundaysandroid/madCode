
网络的优化

1.请求的缓存。
Http请求是可以做缓存的。


三级缓存
内存缓存、外部缓存
算法LruCache
+自定的 一周过期等等。
Sqlite缓存+加密

=============================================
Bitmap的优化

图片压缩

BitmapFactory

BitmapFactory.Options:参数：
inDensity:bitmap的像素密度
inTargetDensity：bitmap最终的像素密度

DensityDpi(屏幕的像素密度)  分辨率		Density
160dpi				320x533		1

px  = dp*Density

 图片存在的几种形式：
	File
	流的形式
	Bitmap的形式---内存


1.质量压缩
AB
CD
压缩后
AA
AA


2.尺寸压缩

3.采样率压缩



=====================终极压缩====================================

1.IOS拍照1M的图片要比安卓拍照排出来的5M的图片还要清晰。
都是在同一个环境下，保存的都是JPEG。

为什么？

2.图像处理引擎
95年 JPEG处理引擎，用于最初的在PC上面处理图片的引擎。

05年  skia开源的引擎, 开发了一套基于JPEG处理引擎的第二次开发。便于浏览器的使用。

07年， 安卓上面用的什么引擎？
skia引擎，阉割版。
谷歌拿了skia 思考了半天做了一个决定，去掉一个编码算法---哈夫曼算法。采用定长编码算法。
但是解码还是保留了哈夫曼算法。
导致了图片处理后文件变大了。
理由：当时由于CPU和内存在手机上都非常吃紧 性能差，由于哈夫曼算法非常吃CPU，被迫用了其他的算法。

我们的优化：
绕过安卓Bitmap API层，来自己编码实现----修复使用哈夫曼算法。


argb
一个像素点包涵四个信息：alpha，red,green，blue

a b c d e

abcde acdbe bacde ……

101010100011100
a:001
b:010
c:011
d:100
e:101
用3位来表示一个字符信息，属于定长编码的最优。

abcde
001 010 011 100 101
加权信息编码

a:80%
b:10%
c:10%
d:0%
e:0%
这种情况，编码就可以优化了
a:01
b:10
c:11
优化后的abc:01 10 11
优化前的abc:001 010 011

问题来了：
	如何得到每一个字母出现的权重？
哈夫曼编码：需要去扫描真个信息(图片信息--每一个像素包括ARGB)，药大量计算，很吃CPU。

1280*800像素*4

-------------------如何实现----------=-----------

下载JPEG引擎使用的库---libjpeg库
http://www.ijg.org/

基于该引擎来做一定的开发----自己实现编码。

1.导入库文件libjpegbither.so
2.导入头文件
3.写mk文件
Android.mk
Applicatoin.mk

4.写代码
C++: XX.cpp
C:   XX.c


1.将android的bitmap解码，并转换成RGB数据
一个图片信息---像素点(argb)
alpha去掉


2.JPEG对象分配空间以及初始化
3.指定压缩数据源
4.获取文件信息
5.为压缩设置参数，比如图像大小、类型、颜色空间
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
6.开始压缩
jpeg_start_compress()
7.压缩结束
jpeg_finish_compress()
8.释放资源























